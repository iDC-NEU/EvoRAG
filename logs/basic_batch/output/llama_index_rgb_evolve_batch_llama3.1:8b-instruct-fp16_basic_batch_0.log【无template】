/home/zhangyz/miniconda3/envs/llmrag2/lib/python3.10/site-packages/torch/cuda/__init__.py:61: FutureWarning: The pynvml package is deprecated. Please install nvidia-ml-py instead. If you did not install pynvml directly, please report this to the maintainers of the package that installed pynvml for you.
  import pynvml  # type: ignore[import]
[nltk_data] Downloading package punkt_tab to
[nltk_data]     /home/zhangyz/miniconda3/envs/llmrag2/lib/python3.10/s
[nltk_data]     ite-packages/llama_index/core/_static/nltk_cache...
[nltk_data]   Package punkt_tab is already up-to-date!
/home/zhangyz/miniconda3/envs/llmrag2/lib/python3.10/site-packages/ignite/handlers/checkpoint.py:16: DeprecationWarning: `TorchScript` support for functional optimizers is deprecated and will be removed in a future PyTorch release. Consider using the `torch.compile` optimizer instead.
  from torch.distributed.optim import ZeroRedundancyOptimizer
Namespace(dataset_name='rgb', llm='llama3.1:8b-instruct-fp16', forward_llm='Meta-Llama-3-8B-Instruct', llm_fb='None', graphdb='nebulagraph', space_name='rgb_zyz', option='evolve_batch', llmbackend='llama_index', iteration=0, type='unchanged', pruning=10, entity=10, hop=2, similar=False, rate=0.0)
{'server': {'ui_port': 8083, 'ui_share': False}, 'llm': {'zhipu': {'url': 'https://open.bigmodel.cn/api/paas/v4', 'key': 'YOUR API-KEY'}, 'moonshot': {'url': 'https://api.moonshot.cn/v1', 'key': 'YOUR API-KEY'}, 'baichuan': {'url': 'https://api.baichuan-ai.com/v1', 'key': 'YOUR API-KEY'}, 'qwen': {'url': 'https://dashscope.aliyuncs.com/compatible-mode/v1', 'key': 'YOUR API-KEY'}, 'lingyiwanwu': {'url': 'https://api.lingyiwanwu.com/v1', 'key': 'YOUR API-KEY'}, 'deepseek': {'url': 'https://api.deepseek.com', 'key': 'YOUR API-KEY'}, 'doubao': {'url': 'https://ark.cn-beijing.volces.com/api/v3', 'key': 'YOUR API-KEY'}, 'gpt': {'url': 'https://api.aigc798.com/v1/', 'key': 'sk-IEnkbBAtmH6L7YuApel4OSTcmdxizcuqpXl4xPTXeaziDA3e'}, 'llama': {'url': 'http://localhost:11434/v1', 'key': 'ollama'}}, 'database': {'neo4j': {'url': 'bolt://localhost:7690', 'username': 'neo4j', 'password': '12345678'}, 'nebulagraph': {'url': '127.0.0.1:9669', 'username': 'root', 'password': 'nebula'}}, 'organization': 'iDC-NE', 'embedding': {'name': 'huggingface', 'model': 'BAAI/bge-large-en-v1.5', 'dim': 1024, 'device': 'cuda:1', 'batch_size': 48}, 'shouldRebuildDatabase': False, 'score_min': 20, 'score_max': 200, 'iteration': 0, 'use_local_model': True, 'entity': 10, 'hop': 2, 'pruning': 10, 'algorithm': 'basic_batch', 'batch_size': 4, 'redundancy': False, 'feedback': True, 'rate': 0.0, 'evolve_basic': {'graphrag_response': 'basic', 'extract_keywords': 'basic', 'retrieve_path': 'basic', 'simThreshold': 0.55, 'score_weight': 0.5, 'scoreThreshold': 70, 'redundant_process': 'basic_only_relationship_strict', 'feedback_process': 'basic_for_triplet', 'top_k_per_entity': True, 'lr': 5000000}, 'evolve_standard': {'graphrag_response': 'basic', 'extract_keywords': 'basic', 'retrieve_path': 'standard', 'simThreshold': 0, 'scoreThreshold': -2, 'score_weight': 0.5, 'lr': 5000000, 'redundant_process': 'basic_only_relationship_strict', 'feedback_process': 'standard_for_path', 'top_k_per_entity': True}, 'evolve_shared_prefix': {'graphrag_response': 'basic_shared_prefix', 'extract_keywords': 'basic', 'retrieve_path': 'standard', 'simThreshold': 0, 'score_weight': 0.5, 'scoreThreshold': -2, 'redundant_process': 'basic_only_relationship_strict', 'feedback_process': 'standard_for_path_shared_prefix', 'top_k_per_entity': True, 'lr': 5000000}, 'standard_batch': {'graphrag_response': 'basic_shared_prefix', 'extract_keywords': 'basic', 'retrieve_path': 'standard', 'simThreshold': 0, 'score_weight': 0.5, 'scoreThreshold': -2, 'redundant_process': 'basic_only_relationship_strict', 'feedback_process': 'standard_for_path_shared_prefix', 'top_k_per_entity': True, 'lr': 5000000}, 'basic_batch': {'graphrag_response': 'basic_shared_prefix', 'extract_keywords': 'basic', 'retrieve_path': 'basic', 'simThreshold': 0, 'score_weight': 0.5, 'scoreThreshold': 61, 'redundant_process': 'basic_only_relationship_strict', 'feedback_process': 'basic_for_triplet_shared_prefix', 'top_k_per_entity': True, 'lr': 5000000}}
{'server': {'ui_port': 8083, 'ui_share': False}, 'llm': 'llama3.1:8b-instruct-fp16', 'database': {'neo4j': {'url': 'bolt://localhost:7690', 'username': 'neo4j', 'password': '12345678'}, 'nebulagraph': {'url': '127.0.0.1:9669', 'username': 'root', 'password': 'nebula'}}, 'organization': 'iDC-NE', 'embedding': {'name': 'huggingface', 'model': 'BAAI/bge-large-en-v1.5', 'dim': 1024, 'device': 'cuda:1', 'batch_size': 48}, 'shouldRebuildDatabase': False, 'score_min': 20, 'score_max': 200, 'iteration': 0, 'use_local_model': True, 'entity': 10, 'hop': 2, 'pruning': 10, 'algorithm': 'basic_batch', 'batch_size': 4, 'redundancy': False, 'feedback': True, 'rate': 0.0, 'evolve_basic': {'graphrag_response': 'basic', 'extract_keywords': 'basic', 'retrieve_path': 'basic', 'simThreshold': 0.55, 'score_weight': 0.5, 'scoreThreshold': 70, 'redundant_process': 'basic_only_relationship_strict', 'feedback_process': 'basic_for_triplet', 'top_k_per_entity': True, 'lr': 5000000}, 'evolve_standard': {'graphrag_response': 'basic', 'extract_keywords': 'basic', 'retrieve_path': 'standard', 'simThreshold': 0, 'scoreThreshold': -2, 'score_weight': 0.5, 'lr': 5000000, 'redundant_process': 'basic_only_relationship_strict', 'feedback_process': 'standard_for_path', 'top_k_per_entity': True}, 'evolve_shared_prefix': {'graphrag_response': 'basic_shared_prefix', 'extract_keywords': 'basic', 'retrieve_path': 'standard', 'simThreshold': 0, 'score_weight': 0.5, 'scoreThreshold': -2, 'redundant_process': 'basic_only_relationship_strict', 'feedback_process': 'standard_for_path_shared_prefix', 'top_k_per_entity': True, 'lr': 5000000}, 'standard_batch': {'graphrag_response': 'basic_shared_prefix', 'extract_keywords': 'basic', 'retrieve_path': 'standard', 'simThreshold': 0, 'score_weight': 0.5, 'scoreThreshold': -2, 'redundant_process': 'basic_only_relationship_strict', 'feedback_process': 'standard_for_path_shared_prefix', 'top_k_per_entity': True, 'lr': 5000000}, 'basic_batch': {'graphrag_response': 'basic_shared_prefix', 'extract_keywords': 'basic', 'retrieve_path': 'basic', 'simThreshold': 0, 'score_weight': 0.5, 'scoreThreshold': 61, 'redundant_process': 'basic_only_relationship_strict', 'feedback_process': 'basic_for_triplet_shared_prefix', 'top_k_per_entity': True, 'lr': 5000000}, 'graphrag_response': 'basic_shared_prefix', 'extract_keywords': 'basic', 'retrieve_path': 'basic', 'simThreshold': 0, 'score_weight': 0.5, 'scoreThreshold': 61, 'redundant_process': 'basic_only_relationship_strict', 'feedback_process': 'basic_for_triplet_shared_prefix', 'top_k_per_entity': True, 'lr': 5000000, 'dataset_name': 'rgb', 'forward_llm': 'Meta-Llama-3-8B-Instruct', 'llm_fb': 'None', 'graphdb': 'nebulagraph', 'space_name': 'rgb_zyz', 'option': 'evolve_batch', 'llmbackend': 'llama_index', 'type': 'unchanged', 'similar': False}
All required directories are ready.
Use llama_index backend to generate
[1;3;33m
 test llm model llama3.1:8b-instruct-fp16 : I'm an artificial intelligence model known as Llama. Llama stands for "Large Language Model Meta AI."
[0mload embedding from /home/hdd/zhangyz/rag-data/rgb_zyz-triplet-embedding-standard.npz
Load embedding from /home/hdd/zhangyz/rag-data/rgb_zyz-entity-embedding-standard.npz
npz contain entity number '54544' with embedding number 54544.
Âä†ËΩΩÂ∑≤ÊúâÁºìÂ≠òÁ¥¢Âºï: /home/hdd/zhangyz/rag-data/rgb_zyz-path2id.json
Ê£ÄÊµãÂà∞Â∑≤ÊúâÂµåÂÖ•Êñá‰ª∂ÔºåÂÖ± 674310 Êù°„ÄÇ
-----------1‰∏™Ê®°Âûã------------------
evolve_basic iteration: 0 batch_size: 4
<class 'int'>
self.args.iteration: 0
Batch 0: start=0, end=4
EmbeddingEnv: embed_name BAAI/bge-large-en-v1.5, embed_batch_size 48, dim 1024, device cuda:1
use huggingface embedding BAAI/bge-large-en-v1.5
Parse error: Expecting property name enclosed in double quotes: line 4 column 19 (char 75) | Response: {
  "Insufficient_information": false,
  "Path_score": {
    "Path 25": 2, // Citrus bowl Includes College football award winners for the 2022 season
    "Path 27": 2, // Citrus bowl Won by Lsu
    "Path 26": 1, // Citrus bowl Occurred on Dec 30, 2022 (helpful context)
    "Path 68": -2, // Paul myerberg Predicts winner of game Lsu (direct contradiction because it implies someone else might win, not LSU as the answer states)
    "Path 69": -2, // Eddie timanus Predicts winner of game Lsu (same reason as above)
    "Path 70": -2 // NCAA Governs Citrus bowl (this path does not directly contradict but is not crucial support for the final answer; it's more about who governs than who won the game)
  }
}
Processing index: 0
Processing index: 1
Processing index: 2
Processing index: 3
Batch 1: start=4, end=8
WARNING:nebula3.logger:Closing a connection that is in use
Parse error: Expecting value: line 1 column 1 (char 0) | Response: ### Scoring Key Evidence Paths for the Question "Which company acquired ShowBiz Cinemas?"

Based on the provided knowledge sequences and the answer derived from them ("Evo Entertainment Group"), I will evaluate key paths.

Path 4: Evo entertainment Acquired by 100 percent of the stock of showbiz cinemas (Score: -2, Direct Contradiction) Incorrect statement. It should be "acquired" instead of "acquired by".

Path 5: Evo entertainment Has venues 16 (Irrelevant to acquisition)
Path 6: Evo entertainment Is based in Austin, texas (Background information but not crucial)
Path 10: Evo entertainment Acquired Showbiz cinemas (Score: 2, Crucial Support) Directly states the acquisition.
Path 15: Evo entertainment group Acquired by 100 percent of the stock of showbiz cinemas (Score: -2, Direct Contradiction) Similar to Path 4, incorrect statement.

However, upon reviewing the paths again, I noticed an error in my initial evaluation for Path 10 and a better option:

Path 17: Evo entertainment group Founded in 2014 (Background information but not crucial)
Path 20: Evo entertainment group Owned by Kevin mitchell (Background information but not crucial)
Path 21: Evo entertainment group Has ceo Mitch roberts (Background information but not crucial)
Path 24: Evo entertainment group Announced partnership with Showbiz cinemas (Not directly related to acquisition)
Path 26: Evo entertainment group Acquired by Times square grand slam (Incorrect, as the actual acquisition is by ShowBiz Cinemas)

Correcting my evaluation for Path 10 and focusing on direct relevance:

Path 50: Showbiz cinemas Owned by Evo entertainment group (Score: 2, Crucial Support) Directly states ownership, implying acquisition.

Given this correction, I will ensure the output strictly adheres to the instructions. Since only two paths were found directly relevant after re-evaluation, they should be included in the output.

### Output

{
  "Insufficient_information": false,
  "Path_score": {
    "Path 10": 2,
    "Path 50": 2
  }
}
Parse error: Expecting property name enclosed in double quotes: line 4 column 19 (char 75) | Response: {
  "Insufficient_information": false,
  "Path_score": {
    "Path 67": 2, // Sofi stadium Will host Super bowl in 2022
    "Path 70": 2, // Super bowl Held at Sofi stadium
    "Path 71": 2, // Super bowl Will be held at Sofi stadium
    "Path 72": 2, // Super bowl Took place at Sofi stadium
    "Path 75": 2, // Super bowl 2022 Took place at Sofi stadium
    "Path 80": 2  // Super bowl lvi Takes place at Sofi stadium
  }
}
Parse error: Expecting value: line 1 column 1 (char 0) | Response: ### Output

{
  "Insufficient_information": false,
  "Path_score": {
    "Path 47": 2, // Truth social Launched on Ios
    "Path 49": 1, // Truth social Available on Ios app store
    "Path 50": 1, // Truth social Launched in Ios app store
    "Path 52": 1, // Truth social Launched on Iphone
    "Path 53": 1, // Truth social Available on Iphone
    "Path 54": -2 // Truth social Found by Techcrunch (contradicts Path 47)
  }
}
Processing index: 4
Processing index: 5
Processing index: 6
Processing index: 7
Batch 2: start=8, end=10
Parse error: Expecting value: line 1 column 1 (char 0) | Response: ### Scoring

Based on the question "What won best drama at 79th Golden Globes?" and the knowledge-derived answer "The Power of the Dog and Belfast tied for Best Drama Film at the 79th Golden Globes," I will evaluate relevant paths.

*   **Path 5 (2 - Crucial Support)**: All quiet on the western front beat movie The fabelmans. (Irrelevant, not a drama)
*   **Path 87 (-2 - Direct Contradiction)**: The power of the dog received award for Best drama film. (While it's true that 'The Power' won an award related to drama, this path does not directly state the outcome at the 79th Golden Globes.)
*   **Path 86 (1 - Helpful Context)**: The power of the dog Tied with Belfast.
*   **Path 89 (-2 - Direct Contradiction)**: The power of the dog Nominated for Best picture. (Not relevant to the question about the 79th Golden Globe winner in best drama)
*   **Path 13 (1 - Helpful Context)**: Belfast Tied with The power of the dog.
*   **Path 88 (2 - Crucial Support)**: The power of the dog Won award Best motion picture ‚Äì drama.

### Output

The most relevant paths that directly support or contradict the knowledge-derived answer are:

{
    "Insufficient_information": false,
    "Path_score": {
        "Path 86": 1,
        "Path 13": 1,
        "Path 88": 2
    }
}
Processing index: 8
Processing index: 9
query_number: 10
